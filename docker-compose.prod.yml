version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: reservasegura
      POSTGRES_USER: reservasegura_user
      POSTGRES_PASSWORD: reservasegura_pass_prod_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reservasegura-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reservasegura_user -d reservasegura"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass reservasegura_redis_2024
    volumes:
      - redis_data:/data
    networks:
      - reservasegura-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ReservaSegura API
  reservasegura-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://reservasegura_user:reservasegura_pass_prod_2024@postgres:5432/reservasegura
      REDIS_URL: redis://:reservasegura_redis_2024@redis:6379
      FIRECRAWL_API_KEY: fc-2dda7f7f0e2c4ccb816cb21e7f372410
      AUTO_START_SCRAPER: "true"
      JWT_SECRET: reservasegura_jwt_secret_prod_2024_ultra_secure
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reservasegura-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.reservasegura.com`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=4000"

  # ReservaSegura Web Frontend
  reservasegura-web:
    build:
      context: .
      dockerfile: Dockerfile.web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3003
      NEXT_PUBLIC_API_URL: https://api.reservasegura.com
      NEXTAUTH_URL: https://reservasegura.com
      NEXTAUTH_SECRET: reservasegura_nextauth_secret_prod_2024
      DATABASE_URL: postgresql://reservasegura_user:reservasegura_pass_prod_2024@postgres:5432/reservasegura
    depends_on:
      - reservasegura-api
    networks:
      - reservasegura-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`reservasegura.com`) || Host(`www.reservasegura.com`)"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=3003"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@reservasegura.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - reservasegura-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.reservasegura.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - reservasegura-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.reservasegura.com`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: reservasegura_grafana_admin_2024
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: monitor.reservasegura.com
      GF_SERVER_ROOT_URL: https://monitor.reservasegura.com
      GF_SMTP_ENABLED: true
      GF_SMTP_HOST: smtp.gmail.com:587
      GF_SMTP_USER: alerts@reservasegura.com
      GF_SMTP_PASSWORD: your_smtp_password
      GF_SMTP_FROM_ADDRESS: alerts@reservasegura.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - reservasegura-network
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitor.reservasegura.com`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - reservasegura-network

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      - reservasegura-network

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - reservasegura-network

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:latest
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - reservasegura-network

  # Uptime Kuma for Service Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    restart: unless-stopped
    volumes:
      - uptime_data:/app/data
    networks:
      - reservasegura-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`status.reservasegura.com`)"
      - "traefik.http.routers.uptime.tls=true"
      - "traefik.http.routers.uptime.tls.certresolver=letsencrypt"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"

networks:
  reservasegura-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:
  uptime_data:
  letsencrypt_data: